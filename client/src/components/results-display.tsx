import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { BarChart3, Plus, Download, ThumbsUp, AlertTriangle, X } from "lucide-react";
import { type AssessmentResult, type AppConfig } from "@/lib/types";

interface ResultsDisplayProps {
  result: AssessmentResult;
  onNewAssessment: () => void;
  appConfig?: AppConfig;
}

interface ProgressCircleProps {
  score: number;
  color: string;
  size?: number;
}

function ProgressCircle({ score, color, size = 80 }: ProgressCircleProps) {
  const radius = (size - 8) / 2;
  const circumference = 2 * Math.PI * radius;
  const strokeDashoffset = circumference - (score / 100) * circumference;

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg className="progress-ring" width={size} height={size}>
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="rgba(0,255,255,0.2)"
          strokeWidth="4"
          fill="none"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke={color}
          strokeWidth="4"
          fill="none"
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          className="transition-all duration-1000"
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-lg font-bold" style={{ color }}>
          {Math.round(score)}
        </span>
      </div>
    </div>
  );
}

export default function ResultsDisplay({ result, onNewAssessment, appConfig }: ResultsDisplayProps) {
  const getRecommendationStyle = (recommendation: string) => {
    const upperRec = recommendation.toUpperCase();
    if (upperRec === "HIRE" || upperRec === (appConfig?.hireLabel?.toUpperCase())) {
      return "bg-green-500 text-white";
    } else if (upperRec === "REJECT" || upperRec === (appConfig?.rejectLabel?.toUpperCase())) {
      return "bg-red-500 text-white";
    } else {
      return "bg-orange-500 text-white";
    }
  };

  const getRecommendationIcon = (recommendation: string) => {
    const upperRec = recommendation.toUpperCase();
    if (upperRec === "HIRE" || upperRec === (appConfig?.hireLabel?.toUpperCase())) {
      return <ThumbsUp className="mr-2" />;
    } else if (upperRec === "REJECT" || upperRec === (appConfig?.rejectLabel?.toUpperCase())) {
      return <X className="mr-2" />;
    } else {
      return <AlertTriangle className="mr-2" />;
    }
  };

  const handleDownloadReport = () => {
    // Generate a simple text report
    const reportContent = `
AURASCAN AI ASSESSMENT REPORT
============================

Candidate: ${result.fullName}
Evaluation Type: ${result.evaluationType}
Assessment Date: ${new Date(result.createdAt).toLocaleDateString()}

RESULTS:
--------
Mood: ${result.moodText} (${result.moodScore}%)
Trust Score: ${result.trustScore}/100
Risk Level: ${result.riskScore}/100

FINAL RECOMMENDATION: ${result.recommendation}
Reason: ${result.reason}

Generated by Aurascan AI Assessment Platform
    `.trim();

    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `aurascan-report-${result.fullName.replace(/\s+/g, "-")}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="slide-up">
      <Card className="glassmorphism rounded-2xl card-hover">
        <CardContent className="p-10">
          <div className="text-center mb-10">
            <div className="w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-green-400 to-[var(--cyber-cyan)] rounded-full flex items-center justify-center shadow-lg pulse-glow">
              <BarChart3 className="text-black text-3xl" />
            </div>
            <h2 className="text-3xl font-bold gradient-text mb-3">Assessment Results</h2>
            <p className="text-gray-400 text-lg">Comprehensive AI Analysis Complete</p>
          </div>

        {/* Candidate Info */}
        <div className="bg-[var(--darker-surface)] rounded-lg p-4 mb-6">
          <h3 className="text-lg font-medium mb-2 text-[var(--cyber-cyan)]">
            Candidate Information
          </h3>
          <p className="text-gray-300">Name: <span>{result.fullName}</span></p>
          <p className="text-gray-300">
            Evaluation Type: <span className="capitalize">{result.evaluationType}</span>
          </p>
        </div>

        {/* Metrics Grid */}
        <div className={`grid ${result.voiceSentiment ? 'md:grid-cols-4' : 'md:grid-cols-3'} gap-6 mb-8`}>
          {/* Mood Score */}
          <div className="bg-[var(--darker-surface)] rounded-lg p-6 text-center hover-glow">
            <div className="flex justify-center mb-4">
              <ProgressCircle score={result.moodScore} color="var(--cyber-cyan)" />
            </div>
            <h4 className="text-sm font-medium text-gray-400 mb-1">Mood Detected</h4>
            <p className="text-lg font-semibold text-white">{result.moodText}</p>
          </div>

          {/* Trust Score */}
          <div className="bg-[var(--darker-surface)] rounded-lg p-6 text-center hover-glow">
            <div className="flex justify-center mb-4">
              <ProgressCircle score={result.trustScore} color="var(--cyber-cyan)" />
            </div>
            <h4 className="text-sm font-medium text-gray-400 mb-1">Trust Score</h4>
            <p className="text-lg font-semibold text-white">0-100 Scale</p>
          </div>

          {/* Risk Level */}
          <div className="bg-[var(--darker-surface)] rounded-lg p-6 text-center hover-glow">
            <div className="flex justify-center mb-4">
              <ProgressCircle score={result.riskScore} color="#FF4444" />
            </div>
            <h4 className="text-sm font-medium text-gray-400 mb-1">Risk Level</h4>
            <p className="text-lg font-semibold text-white">0-100 Scale</p>
          </div>

          {/* Voice Sentiment - Only shown when available */}
          {result.voiceSentiment && (
            <div className="bg-[var(--darker-surface)] rounded-lg p-6 text-center hover-glow border border-[var(--cyber-cyan)] glow-cyan">
              <div className="flex justify-center mb-4">
                <ProgressCircle score={result.voiceSentiment.confidence * 100} color="#9333EA" />
              </div>
              <h4 className="text-sm font-medium text-gray-400 mb-1">Voice Sentiment</h4>
              <p className="text-lg font-semibold text-white capitalize">{result.voiceSentiment.emotion}</p>
              <p className="text-xs text-purple-400 mt-1 capitalize">{result.voiceSentiment.tone} tone</p>
            </div>
          )}
        </div>

        {/* Final Recommendation */}
        <div className="bg-[var(--darker-surface)] rounded-lg p-6 text-center mb-8">
          <h3 className="text-lg font-medium mb-4 text-[var(--cyber-cyan)]">
            Final Recommendation
          </h3>
          <div className={`inline-flex items-center px-6 py-3 rounded-full text-lg font-bold glow-cyan-strong ${getRecommendationStyle(result.recommendation)}`}>
            {getRecommendationIcon(result.recommendation)}
            <span>{result.recommendation}</span>
          </div>
          <p className="text-gray-400 mt-4 text-sm">{result.reason}</p>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4">
          <Button 
            onClick={onNewAssessment}
            variant="outline"
            className="flex-1 bg-[var(--light-surface)] text-white border-gray-600 hover-glow"
          >
            <Plus className="mr-2 h-4 w-4" />
            New Assessment
          </Button>
          <Button 
            onClick={handleDownloadReport}
            className="flex-1 bg-[var(--cyber-cyan)] text-black hover-glow"
          >
            <Download className="mr-2 h-4 w-4" />
            Download Report
          </Button>
        </div>
      </CardContent>
    </Card>
    </div>
  );
}
